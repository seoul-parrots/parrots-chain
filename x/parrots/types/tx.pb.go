// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: parrots/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSetProfile struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *MsgSetProfile) Reset()         { *m = MsgSetProfile{} }
func (m *MsgSetProfile) String() string { return proto.CompactTextString(m) }
func (*MsgSetProfile) ProtoMessage()    {}
func (*MsgSetProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc1e70ed5a30bb3, []int{0}
}
func (m *MsgSetProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProfile.Merge(m, src)
}
func (m *MsgSetProfile) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProfile.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProfile proto.InternalMessageInfo

func (m *MsgSetProfile) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetProfile) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MsgSetProfile) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MsgSetProfile) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MsgSetProfileResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgSetProfileResponse) Reset()         { *m = MsgSetProfileResponse{} }
func (m *MsgSetProfileResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetProfileResponse) ProtoMessage()    {}
func (*MsgSetProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc1e70ed5a30bb3, []int{1}
}
func (m *MsgSetProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetProfileResponse.Merge(m, src)
}
func (m *MsgSetProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetProfileResponse proto.InternalMessageInfo

func (m *MsgSetProfileResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUploadBeak struct {
	Creator         string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	FileIndex       string   `protobuf:"bytes,2,opt,name=fileIndex,proto3" json:"fileIndex,omitempty"`
	Name            string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatorUsername string   `protobuf:"bytes,4,opt,name=creatorUsername,proto3" json:"creatorUsername,omitempty"`
	Description     string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	License         string   `protobuf:"bytes,6,opt,name=license,proto3" json:"license,omitempty"`
	LinkedBeaks     []uint64 `protobuf:"varint,7,rep,packed,name=linkedBeaks,proto3" json:"linkedBeaks,omitempty"`
	Tags            []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (m *MsgUploadBeak) Reset()         { *m = MsgUploadBeak{} }
func (m *MsgUploadBeak) String() string { return proto.CompactTextString(m) }
func (*MsgUploadBeak) ProtoMessage()    {}
func (*MsgUploadBeak) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc1e70ed5a30bb3, []int{2}
}
func (m *MsgUploadBeak) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUploadBeak) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUploadBeak.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUploadBeak) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUploadBeak.Merge(m, src)
}
func (m *MsgUploadBeak) XXX_Size() int {
	return m.Size()
}
func (m *MsgUploadBeak) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUploadBeak.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUploadBeak proto.InternalMessageInfo

func (m *MsgUploadBeak) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUploadBeak) GetFileIndex() string {
	if m != nil {
		return m.FileIndex
	}
	return ""
}

func (m *MsgUploadBeak) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUploadBeak) GetCreatorUsername() string {
	if m != nil {
		return m.CreatorUsername
	}
	return ""
}

func (m *MsgUploadBeak) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgUploadBeak) GetLicense() string {
	if m != nil {
		return m.License
	}
	return ""
}

func (m *MsgUploadBeak) GetLinkedBeaks() []uint64 {
	if m != nil {
		return m.LinkedBeaks
	}
	return nil
}

func (m *MsgUploadBeak) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type MsgUploadBeakResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgUploadBeakResponse) Reset()         { *m = MsgUploadBeakResponse{} }
func (m *MsgUploadBeakResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUploadBeakResponse) ProtoMessage()    {}
func (*MsgUploadBeakResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc1e70ed5a30bb3, []int{3}
}
func (m *MsgUploadBeakResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUploadBeakResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUploadBeakResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUploadBeakResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUploadBeakResponse.Merge(m, src)
}
func (m *MsgUploadBeakResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUploadBeakResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUploadBeakResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUploadBeakResponse proto.InternalMessageInfo

func (m *MsgUploadBeakResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgSendRespect struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	BeakId  uint64 `protobuf:"varint,2,opt,name=beakId,proto3" json:"beakId,omitempty"`
}

func (m *MsgSendRespect) Reset()         { *m = MsgSendRespect{} }
func (m *MsgSendRespect) String() string { return proto.CompactTextString(m) }
func (*MsgSendRespect) ProtoMessage()    {}
func (*MsgSendRespect) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc1e70ed5a30bb3, []int{4}
}
func (m *MsgSendRespect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendRespect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendRespect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendRespect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendRespect.Merge(m, src)
}
func (m *MsgSendRespect) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendRespect) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendRespect.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendRespect proto.InternalMessageInfo

func (m *MsgSendRespect) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendRespect) GetBeakId() uint64 {
	if m != nil {
		return m.BeakId
	}
	return 0
}

type MsgSendRespectResponse struct {
}

func (m *MsgSendRespectResponse) Reset()         { *m = MsgSendRespectResponse{} }
func (m *MsgSendRespectResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendRespectResponse) ProtoMessage()    {}
func (*MsgSendRespectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc1e70ed5a30bb3, []int{5}
}
func (m *MsgSendRespectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendRespectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendRespectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendRespectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendRespectResponse.Merge(m, src)
}
func (m *MsgSendRespectResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendRespectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendRespectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendRespectResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSetProfile)(nil), "parrots.parrots.MsgSetProfile")
	proto.RegisterType((*MsgSetProfileResponse)(nil), "parrots.parrots.MsgSetProfileResponse")
	proto.RegisterType((*MsgUploadBeak)(nil), "parrots.parrots.MsgUploadBeak")
	proto.RegisterType((*MsgUploadBeakResponse)(nil), "parrots.parrots.MsgUploadBeakResponse")
	proto.RegisterType((*MsgSendRespect)(nil), "parrots.parrots.MsgSendRespect")
	proto.RegisterType((*MsgSendRespectResponse)(nil), "parrots.parrots.MsgSendRespectResponse")
}

func init() { proto.RegisterFile("parrots/tx.proto", fileDescriptor_0cc1e70ed5a30bb3) }

var fileDescriptor_0cc1e70ed5a30bb3 = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xb3, 0xc9, 0x92, 0xb6, 0x53, 0xd1, 0x22, 0x4b, 0x14, 0x2b, 0x42, 0xcb, 0x6a, 0x0f,
	0x34, 0xa7, 0xad, 0x80, 0x37, 0xc8, 0xad, 0x87, 0x22, 0xb4, 0xb4, 0x42, 0xe2, 0xe6, 0xee, 0x0e,
	0x91, 0x95, 0xc5, 0x5e, 0xd9, 0x46, 0x4a, 0x1f, 0x01, 0x4e, 0x3c, 0x16, 0xc7, 0x1c, 0x39, 0xa2,
	0xe4, 0x21, 0xb8, 0x22, 0x3b, 0xde, 0x3f, 0x09, 0x4b, 0x38, 0xad, 0xe7, 0x9b, 0xf1, 0xec, 0x6f,
	0x3e, 0xdb, 0xf0, 0xa4, 0x62, 0x4a, 0x49, 0xa3, 0xaf, 0xcc, 0x32, 0xad, 0x94, 0x34, 0x92, 0x9c,
	0x7b, 0x25, 0xf5, 0xdf, 0xe4, 0x6b, 0x00, 0x8f, 0x6f, 0xf4, 0xfc, 0x3d, 0x9a, 0x77, 0x4a, 0x7e,
	0xe2, 0x25, 0x12, 0x0a, 0x47, 0xb9, 0x42, 0x66, 0xa4, 0xa2, 0x41, 0x1c, 0x4c, 0x4f, 0xb2, 0x3a,
	0x24, 0x13, 0x38, 0xfe, 0xa2, 0x51, 0x09, 0xf6, 0x19, 0xe9, 0xd0, 0xa5, 0x9a, 0x98, 0xc4, 0x70,
	0x5a, 0x70, 0x5d, 0x95, 0xec, 0xe1, 0xad, 0x4d, 0x8f, 0x5c, 0xba, 0x2b, 0xb9, 0x0a, 0xd4, 0xb9,
	0xe2, 0x95, 0xe1, 0x52, 0xd0, 0xd0, 0x57, 0xb4, 0x52, 0x72, 0x09, 0x4f, 0x77, 0x50, 0x32, 0xd4,
	0x95, 0x14, 0x1a, 0xc9, 0x19, 0x0c, 0x79, 0xe1, 0x68, 0xc2, 0x6c, 0xc8, 0x8b, 0xe4, 0xf7, 0x16,
	0xfa, 0xae, 0x2a, 0x25, 0x2b, 0x66, 0xc8, 0x16, 0x07, 0xa0, 0x9f, 0xc3, 0x89, 0xed, 0x75, 0x2d,
	0x0a, 0x5c, 0x7a, 0xea, 0x56, 0x20, 0x04, 0x42, 0xd1, 0xf2, 0xba, 0x35, 0x99, 0xc2, 0xb9, 0xdf,
	0x7c, 0x57, 0x4f, 0xbb, 0x85, 0xdd, 0x97, 0xf7, 0x47, 0x7a, 0xf4, 0xd7, 0x48, 0x96, 0xab, 0xe4,
	0x39, 0x0a, 0x8d, 0x74, 0xbc, 0xe5, 0xf2, 0xa1, 0xdd, 0x5b, 0x72, 0xb1, 0x40, 0xc7, 0xaf, 0xe9,
	0x51, 0x3c, 0x9a, 0x86, 0x59, 0x57, 0xb2, 0x6c, 0x86, 0xcd, 0x35, 0x3d, 0x8e, 0x47, 0x96, 0xcd,
	0xae, 0xbd, 0x45, 0xed, 0xe0, 0xff, 0xb4, 0x68, 0x06, 0x67, 0xce, 0x4b, 0x51, 0xd8, 0x12, 0xcc,
	0xcd, 0x01, 0x8b, 0x2e, 0x60, 0x7c, 0x8f, 0x6c, 0x71, 0x5d, 0x38, 0x7f, 0xc2, 0xcc, 0x47, 0x09,
	0x85, 0x8b, 0xdd, 0x1e, 0xf5, 0xdf, 0x5e, 0x7f, 0x1b, 0xc2, 0xe8, 0x46, 0xcf, 0xc9, 0x2d, 0x40,
	0xe7, 0xe6, 0x44, 0xe9, 0xde, 0xed, 0x4a, 0x77, 0x8e, 0x73, 0xf2, 0xf2, 0x70, 0xbe, 0x99, 0xe5,
	0x16, 0xa0, 0x73, 0xb4, 0xbd, 0x5d, 0xdb, 0x7c, 0x7f, 0xd7, 0x1e, 0x87, 0x3e, 0xc0, 0x69, 0xd7,
	0x8e, 0x17, 0xfd, 0x30, 0x4d, 0xc1, 0xe4, 0xf2, 0x3f, 0x05, 0x75, 0xe3, 0xd9, 0xab, 0x1f, 0xeb,
	0x28, 0x58, 0xad, 0xa3, 0xe0, 0xd7, 0x3a, 0x0a, 0xbe, 0x6f, 0xa2, 0xc1, 0x6a, 0x13, 0x0d, 0x7e,
	0x6e, 0xa2, 0xc1, 0xc7, 0x67, 0xf5, 0xfb, 0x5b, 0x5e, 0x35, 0x2f, 0xf1, 0xa1, 0x42, 0x7d, 0x3f,
	0x76, 0xaf, 0xf1, 0xcd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x0f, 0x57, 0xce, 0xa1, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SetProfile(ctx context.Context, in *MsgSetProfile, opts ...grpc.CallOption) (*MsgSetProfileResponse, error)
	UploadBeak(ctx context.Context, in *MsgUploadBeak, opts ...grpc.CallOption) (*MsgUploadBeakResponse, error)
	SendRespect(ctx context.Context, in *MsgSendRespect, opts ...grpc.CallOption) (*MsgSendRespectResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetProfile(ctx context.Context, in *MsgSetProfile, opts ...grpc.CallOption) (*MsgSetProfileResponse, error) {
	out := new(MsgSetProfileResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Msg/SetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UploadBeak(ctx context.Context, in *MsgUploadBeak, opts ...grpc.CallOption) (*MsgUploadBeakResponse, error) {
	out := new(MsgUploadBeakResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Msg/UploadBeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendRespect(ctx context.Context, in *MsgSendRespect, opts ...grpc.CallOption) (*MsgSendRespectResponse, error) {
	out := new(MsgSendRespectResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Msg/SendRespect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SetProfile(context.Context, *MsgSetProfile) (*MsgSetProfileResponse, error)
	UploadBeak(context.Context, *MsgUploadBeak) (*MsgUploadBeakResponse, error)
	SendRespect(context.Context, *MsgSendRespect) (*MsgSendRespectResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetProfile(ctx context.Context, req *MsgSetProfile) (*MsgSetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfile not implemented")
}
func (*UnimplementedMsgServer) UploadBeak(ctx context.Context, req *MsgUploadBeak) (*MsgUploadBeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadBeak not implemented")
}
func (*UnimplementedMsgServer) SendRespect(ctx context.Context, req *MsgSendRespect) (*MsgSendRespectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRespect not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Msg/SetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetProfile(ctx, req.(*MsgSetProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UploadBeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUploadBeak)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UploadBeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Msg/UploadBeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UploadBeak(ctx, req.(*MsgUploadBeak))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendRespect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendRespect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendRespect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Msg/SendRespect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendRespect(ctx, req.(*MsgSendRespect))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parrots.parrots.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetProfile",
			Handler:    _Msg_SetProfile_Handler,
		},
		{
			MethodName: "UploadBeak",
			Handler:    _Msg_UploadBeak_Handler,
		},
		{
			MethodName: "SendRespect",
			Handler:    _Msg_SendRespect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parrots/tx.proto",
}

func (m *MsgSetProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUploadBeak) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUploadBeak) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUploadBeak) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.LinkedBeaks) > 0 {
		dAtA2 := make([]byte, len(m.LinkedBeaks)*10)
		var j1 int
		for _, num := range m.LinkedBeaks {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTx(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.License) > 0 {
		i -= len(m.License)
		copy(dAtA[i:], m.License)
		i = encodeVarintTx(dAtA, i, uint64(len(m.License)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CreatorUsername) > 0 {
		i -= len(m.CreatorUsername)
		copy(dAtA[i:], m.CreatorUsername)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CreatorUsername)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FileIndex) > 0 {
		i -= len(m.FileIndex)
		copy(dAtA[i:], m.FileIndex)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FileIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUploadBeakResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUploadBeakResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUploadBeakResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendRespect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendRespect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendRespect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BeakId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BeakId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendRespectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendRespectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendRespectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgUploadBeak) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FileIndex)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CreatorUsername)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.License)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.LinkedBeaks) > 0 {
		l = 0
		for _, e := range m.LinkedBeaks {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUploadBeakResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgSendRespect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BeakId != 0 {
		n += 1 + sovTx(uint64(m.BeakId))
	}
	return n
}

func (m *MsgSendRespectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUploadBeak) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUploadBeak: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUploadBeak: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorUsername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorUsername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field License", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.License = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LinkedBeaks = append(m.LinkedBeaks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LinkedBeaks) == 0 {
					m.LinkedBeaks = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LinkedBeaks = append(m.LinkedBeaks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkedBeaks", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUploadBeakResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUploadBeakResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUploadBeakResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendRespect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendRespect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendRespect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeakId", wireType)
			}
			m.BeakId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeakId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendRespectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendRespectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendRespectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
