// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: parrots/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetProfilesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetProfilesRequest) Reset()         { *m = QueryGetProfilesRequest{} }
func (m *QueryGetProfilesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfilesRequest) ProtoMessage()    {}
func (*QueryGetProfilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{2}
}
func (m *QueryGetProfilesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfilesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfilesRequest.Merge(m, src)
}
func (m *QueryGetProfilesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfilesRequest proto.InternalMessageInfo

func (m *QueryGetProfilesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProfilesResponse struct {
	Profile    []*Profile          `protobuf:"bytes,1,rep,name=Profile,proto3" json:"Profile,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetProfilesResponse) Reset()         { *m = QueryGetProfilesResponse{} }
func (m *QueryGetProfilesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfilesResponse) ProtoMessage()    {}
func (*QueryGetProfilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{3}
}
func (m *QueryGetProfilesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfilesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfilesResponse.Merge(m, src)
}
func (m *QueryGetProfilesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfilesResponse proto.InternalMessageInfo

func (m *QueryGetProfilesResponse) GetProfile() []*Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *QueryGetProfilesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryProfileCountRequest struct {
}

func (m *QueryProfileCountRequest) Reset()         { *m = QueryProfileCountRequest{} }
func (m *QueryProfileCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProfileCountRequest) ProtoMessage()    {}
func (*QueryProfileCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{4}
}
func (m *QueryProfileCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProfileCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProfileCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProfileCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProfileCountRequest.Merge(m, src)
}
func (m *QueryProfileCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProfileCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProfileCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProfileCountRequest proto.InternalMessageInfo

type QueryProfileCountResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryProfileCountResponse) Reset()         { *m = QueryProfileCountResponse{} }
func (m *QueryProfileCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProfileCountResponse) ProtoMessage()    {}
func (*QueryProfileCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{5}
}
func (m *QueryProfileCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProfileCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProfileCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProfileCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProfileCountResponse.Merge(m, src)
}
func (m *QueryProfileCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProfileCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProfileCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProfileCountResponse proto.InternalMessageInfo

func (m *QueryProfileCountResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryGetProfileRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetProfileRequest) Reset()         { *m = QueryGetProfileRequest{} }
func (m *QueryGetProfileRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfileRequest) ProtoMessage()    {}
func (*QueryGetProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{6}
}
func (m *QueryGetProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfileRequest.Merge(m, src)
}
func (m *QueryGetProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfileRequest proto.InternalMessageInfo

func (m *QueryGetProfileRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetProfileResponse struct {
	Profile *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (m *QueryGetProfileResponse) Reset()         { *m = QueryGetProfileResponse{} }
func (m *QueryGetProfileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfileResponse) ProtoMessage()    {}
func (*QueryGetProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{7}
}
func (m *QueryGetProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfileResponse.Merge(m, src)
}
func (m *QueryGetProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfileResponse proto.InternalMessageInfo

func (m *QueryGetProfileResponse) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type QueryGetProfileByUsernameRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *QueryGetProfileByUsernameRequest) Reset()         { *m = QueryGetProfileByUsernameRequest{} }
func (m *QueryGetProfileByUsernameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfileByUsernameRequest) ProtoMessage()    {}
func (*QueryGetProfileByUsernameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{8}
}
func (m *QueryGetProfileByUsernameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfileByUsernameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfileByUsernameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfileByUsernameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfileByUsernameRequest.Merge(m, src)
}
func (m *QueryGetProfileByUsernameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfileByUsernameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfileByUsernameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfileByUsernameRequest proto.InternalMessageInfo

func (m *QueryGetProfileByUsernameRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type QueryGetProfileByUsernameResponse struct {
	Profile *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (m *QueryGetProfileByUsernameResponse) Reset()         { *m = QueryGetProfileByUsernameResponse{} }
func (m *QueryGetProfileByUsernameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfileByUsernameResponse) ProtoMessage()    {}
func (*QueryGetProfileByUsernameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{9}
}
func (m *QueryGetProfileByUsernameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfileByUsernameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfileByUsernameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfileByUsernameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfileByUsernameResponse.Merge(m, src)
}
func (m *QueryGetProfileByUsernameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfileByUsernameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfileByUsernameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfileByUsernameResponse proto.InternalMessageInfo

func (m *QueryGetProfileByUsernameResponse) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type QueryGetBeaksCountRequest struct {
}

func (m *QueryGetBeaksCountRequest) Reset()         { *m = QueryGetBeaksCountRequest{} }
func (m *QueryGetBeaksCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBeaksCountRequest) ProtoMessage()    {}
func (*QueryGetBeaksCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{10}
}
func (m *QueryGetBeaksCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBeaksCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBeaksCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBeaksCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBeaksCountRequest.Merge(m, src)
}
func (m *QueryGetBeaksCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBeaksCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBeaksCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBeaksCountRequest proto.InternalMessageInfo

type QueryGetBeaksCountResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryGetBeaksCountResponse) Reset()         { *m = QueryGetBeaksCountResponse{} }
func (m *QueryGetBeaksCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBeaksCountResponse) ProtoMessage()    {}
func (*QueryGetBeaksCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{11}
}
func (m *QueryGetBeaksCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBeaksCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBeaksCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBeaksCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBeaksCountResponse.Merge(m, src)
}
func (m *QueryGetBeaksCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBeaksCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBeaksCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBeaksCountResponse proto.InternalMessageInfo

func (m *QueryGetBeaksCountResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryGetAllBeaksRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllBeaksRequest) Reset()         { *m = QueryGetAllBeaksRequest{} }
func (m *QueryGetAllBeaksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllBeaksRequest) ProtoMessage()    {}
func (*QueryGetAllBeaksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{12}
}
func (m *QueryGetAllBeaksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllBeaksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllBeaksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllBeaksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllBeaksRequest.Merge(m, src)
}
func (m *QueryGetAllBeaksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllBeaksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllBeaksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllBeaksRequest proto.InternalMessageInfo

func (m *QueryGetAllBeaksRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAllBeaksResponse struct {
	Beaks      []*Beak             `protobuf:"bytes,1,rep,name=beaks,proto3" json:"beaks,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetAllBeaksResponse) Reset()         { *m = QueryGetAllBeaksResponse{} }
func (m *QueryGetAllBeaksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllBeaksResponse) ProtoMessage()    {}
func (*QueryGetAllBeaksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{13}
}
func (m *QueryGetAllBeaksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllBeaksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllBeaksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllBeaksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllBeaksResponse.Merge(m, src)
}
func (m *QueryGetAllBeaksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllBeaksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllBeaksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllBeaksResponse proto.InternalMessageInfo

func (m *QueryGetAllBeaksResponse) GetBeaks() []*Beak {
	if m != nil {
		return m.Beaks
	}
	return nil
}

func (m *QueryGetAllBeaksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBeakByIdRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetBeakByIdRequest) Reset()         { *m = QueryGetBeakByIdRequest{} }
func (m *QueryGetBeakByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBeakByIdRequest) ProtoMessage()    {}
func (*QueryGetBeakByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{14}
}
func (m *QueryGetBeakByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBeakByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBeakByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBeakByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBeakByIdRequest.Merge(m, src)
}
func (m *QueryGetBeakByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBeakByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBeakByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBeakByIdRequest proto.InternalMessageInfo

func (m *QueryGetBeakByIdRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetBeakByIdResponse struct {
	Beak *Beak `protobuf:"bytes,1,opt,name=beak,proto3" json:"beak,omitempty"`
}

func (m *QueryGetBeakByIdResponse) Reset()         { *m = QueryGetBeakByIdResponse{} }
func (m *QueryGetBeakByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBeakByIdResponse) ProtoMessage()    {}
func (*QueryGetBeakByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{15}
}
func (m *QueryGetBeakByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBeakByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBeakByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBeakByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBeakByIdResponse.Merge(m, src)
}
func (m *QueryGetBeakByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBeakByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBeakByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBeakByIdResponse proto.InternalMessageInfo

func (m *QueryGetBeakByIdResponse) GetBeak() *Beak {
	if m != nil {
		return m.Beak
	}
	return nil
}

type QueryGetBeaksByNameSubstringRequest struct {
	NameSubstring string             `protobuf:"bytes,1,opt,name=nameSubstring,proto3" json:"nameSubstring,omitempty"`
	Pagination    *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetBeaksByNameSubstringRequest) Reset()         { *m = QueryGetBeaksByNameSubstringRequest{} }
func (m *QueryGetBeaksByNameSubstringRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBeaksByNameSubstringRequest) ProtoMessage()    {}
func (*QueryGetBeaksByNameSubstringRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{16}
}
func (m *QueryGetBeaksByNameSubstringRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBeaksByNameSubstringRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBeaksByNameSubstringRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBeaksByNameSubstringRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBeaksByNameSubstringRequest.Merge(m, src)
}
func (m *QueryGetBeaksByNameSubstringRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBeaksByNameSubstringRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBeaksByNameSubstringRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBeaksByNameSubstringRequest proto.InternalMessageInfo

func (m *QueryGetBeaksByNameSubstringRequest) GetNameSubstring() string {
	if m != nil {
		return m.NameSubstring
	}
	return ""
}

func (m *QueryGetBeaksByNameSubstringRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBeaksByNameSubstringResponse struct {
	Beaks      []*Beak             `protobuf:"bytes,1,rep,name=beaks,proto3" json:"beaks,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetBeaksByNameSubstringResponse) Reset()         { *m = QueryGetBeaksByNameSubstringResponse{} }
func (m *QueryGetBeaksByNameSubstringResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBeaksByNameSubstringResponse) ProtoMessage()    {}
func (*QueryGetBeaksByNameSubstringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{17}
}
func (m *QueryGetBeaksByNameSubstringResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBeaksByNameSubstringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBeaksByNameSubstringResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBeaksByNameSubstringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBeaksByNameSubstringResponse.Merge(m, src)
}
func (m *QueryGetBeaksByNameSubstringResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBeaksByNameSubstringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBeaksByNameSubstringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBeaksByNameSubstringResponse proto.InternalMessageInfo

func (m *QueryGetBeaksByNameSubstringResponse) GetBeaks() []*Beak {
	if m != nil {
		return m.Beaks
	}
	return nil
}

func (m *QueryGetBeaksByNameSubstringResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBeaksByTagRequest struct {
	Tag        string             `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetBeaksByTagRequest) Reset()         { *m = QueryGetBeaksByTagRequest{} }
func (m *QueryGetBeaksByTagRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBeaksByTagRequest) ProtoMessage()    {}
func (*QueryGetBeaksByTagRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{18}
}
func (m *QueryGetBeaksByTagRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBeaksByTagRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBeaksByTagRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBeaksByTagRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBeaksByTagRequest.Merge(m, src)
}
func (m *QueryGetBeaksByTagRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBeaksByTagRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBeaksByTagRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBeaksByTagRequest proto.InternalMessageInfo

func (m *QueryGetBeaksByTagRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *QueryGetBeaksByTagRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBeaksByTagResponse struct {
	Beaks      []*Beak             `protobuf:"bytes,1,rep,name=beaks,proto3" json:"beaks,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetBeaksByTagResponse) Reset()         { *m = QueryGetBeaksByTagResponse{} }
func (m *QueryGetBeaksByTagResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBeaksByTagResponse) ProtoMessage()    {}
func (*QueryGetBeaksByTagResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{19}
}
func (m *QueryGetBeaksByTagResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBeaksByTagResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBeaksByTagResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBeaksByTagResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBeaksByTagResponse.Merge(m, src)
}
func (m *QueryGetBeaksByTagResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBeaksByTagResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBeaksByTagResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBeaksByTagResponse proto.InternalMessageInfo

func (m *QueryGetBeaksByTagResponse) GetBeaks() []*Beak {
	if m != nil {
		return m.Beaks
	}
	return nil
}

func (m *QueryGetBeaksByTagResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetRespectedBeaksRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetRespectedBeaksRequest) Reset()         { *m = QueryGetRespectedBeaksRequest{} }
func (m *QueryGetRespectedBeaksRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRespectedBeaksRequest) ProtoMessage()    {}
func (*QueryGetRespectedBeaksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{20}
}
func (m *QueryGetRespectedBeaksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRespectedBeaksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRespectedBeaksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRespectedBeaksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRespectedBeaksRequest.Merge(m, src)
}
func (m *QueryGetRespectedBeaksRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRespectedBeaksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRespectedBeaksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRespectedBeaksRequest proto.InternalMessageInfo

func (m *QueryGetRespectedBeaksRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetRespectedBeaksResponse struct {
	Beaks      []*Beak             `protobuf:"bytes,1,rep,name=beaks,proto3" json:"beaks,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetRespectedBeaksResponse) Reset()         { *m = QueryGetRespectedBeaksResponse{} }
func (m *QueryGetRespectedBeaksResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRespectedBeaksResponse) ProtoMessage()    {}
func (*QueryGetRespectedBeaksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{21}
}
func (m *QueryGetRespectedBeaksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRespectedBeaksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRespectedBeaksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRespectedBeaksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRespectedBeaksResponse.Merge(m, src)
}
func (m *QueryGetRespectedBeaksResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRespectedBeaksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRespectedBeaksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRespectedBeaksResponse proto.InternalMessageInfo

func (m *QueryGetRespectedBeaksResponse) GetBeaks() []*Beak {
	if m != nil {
		return m.Beaks
	}
	return nil
}

func (m *QueryGetRespectedBeaksResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProfileByCreatorRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryGetProfileByCreatorRequest) Reset()         { *m = QueryGetProfileByCreatorRequest{} }
func (m *QueryGetProfileByCreatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfileByCreatorRequest) ProtoMessage()    {}
func (*QueryGetProfileByCreatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{22}
}
func (m *QueryGetProfileByCreatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfileByCreatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfileByCreatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfileByCreatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfileByCreatorRequest.Merge(m, src)
}
func (m *QueryGetProfileByCreatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfileByCreatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfileByCreatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfileByCreatorRequest proto.InternalMessageInfo

func (m *QueryGetProfileByCreatorRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryGetProfileByCreatorResponse struct {
	Profile *Profile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (m *QueryGetProfileByCreatorResponse) Reset()         { *m = QueryGetProfileByCreatorResponse{} }
func (m *QueryGetProfileByCreatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfileByCreatorResponse) ProtoMessage()    {}
func (*QueryGetProfileByCreatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{23}
}
func (m *QueryGetProfileByCreatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfileByCreatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfileByCreatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfileByCreatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfileByCreatorResponse.Merge(m, src)
}
func (m *QueryGetProfileByCreatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfileByCreatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfileByCreatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfileByCreatorResponse proto.InternalMessageInfo

func (m *QueryGetProfileByCreatorResponse) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type QueryGetCommentsByBeakIdRequest struct {
	BeakId     uint64              `protobuf:"varint,1,opt,name=beakId,proto3" json:"beakId,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCommentsByBeakIdRequest) Reset()         { *m = QueryGetCommentsByBeakIdRequest{} }
func (m *QueryGetCommentsByBeakIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCommentsByBeakIdRequest) ProtoMessage()    {}
func (*QueryGetCommentsByBeakIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{24}
}
func (m *QueryGetCommentsByBeakIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCommentsByBeakIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCommentsByBeakIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCommentsByBeakIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCommentsByBeakIdRequest.Merge(m, src)
}
func (m *QueryGetCommentsByBeakIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCommentsByBeakIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCommentsByBeakIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCommentsByBeakIdRequest proto.InternalMessageInfo

func (m *QueryGetCommentsByBeakIdRequest) GetBeakId() uint64 {
	if m != nil {
		return m.BeakId
	}
	return 0
}

func (m *QueryGetCommentsByBeakIdRequest) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCommentsByBeakIdResponse struct {
	Comments   []*Comment          `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetCommentsByBeakIdResponse) Reset()         { *m = QueryGetCommentsByBeakIdResponse{} }
func (m *QueryGetCommentsByBeakIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCommentsByBeakIdResponse) ProtoMessage()    {}
func (*QueryGetCommentsByBeakIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c9f6f9ef187aba2, []int{25}
}
func (m *QueryGetCommentsByBeakIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCommentsByBeakIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCommentsByBeakIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCommentsByBeakIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCommentsByBeakIdResponse.Merge(m, src)
}
func (m *QueryGetCommentsByBeakIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCommentsByBeakIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCommentsByBeakIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCommentsByBeakIdResponse proto.InternalMessageInfo

func (m *QueryGetCommentsByBeakIdResponse) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *QueryGetCommentsByBeakIdResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "parrots.parrots.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "parrots.parrots.QueryParamsResponse")
	proto.RegisterType((*QueryGetProfilesRequest)(nil), "parrots.parrots.QueryGetProfilesRequest")
	proto.RegisterType((*QueryGetProfilesResponse)(nil), "parrots.parrots.QueryGetProfilesResponse")
	proto.RegisterType((*QueryProfileCountRequest)(nil), "parrots.parrots.QueryProfileCountRequest")
	proto.RegisterType((*QueryProfileCountResponse)(nil), "parrots.parrots.QueryProfileCountResponse")
	proto.RegisterType((*QueryGetProfileRequest)(nil), "parrots.parrots.QueryGetProfileRequest")
	proto.RegisterType((*QueryGetProfileResponse)(nil), "parrots.parrots.QueryGetProfileResponse")
	proto.RegisterType((*QueryGetProfileByUsernameRequest)(nil), "parrots.parrots.QueryGetProfileByUsernameRequest")
	proto.RegisterType((*QueryGetProfileByUsernameResponse)(nil), "parrots.parrots.QueryGetProfileByUsernameResponse")
	proto.RegisterType((*QueryGetBeaksCountRequest)(nil), "parrots.parrots.QueryGetBeaksCountRequest")
	proto.RegisterType((*QueryGetBeaksCountResponse)(nil), "parrots.parrots.QueryGetBeaksCountResponse")
	proto.RegisterType((*QueryGetAllBeaksRequest)(nil), "parrots.parrots.QueryGetAllBeaksRequest")
	proto.RegisterType((*QueryGetAllBeaksResponse)(nil), "parrots.parrots.QueryGetAllBeaksResponse")
	proto.RegisterType((*QueryGetBeakByIdRequest)(nil), "parrots.parrots.QueryGetBeakByIdRequest")
	proto.RegisterType((*QueryGetBeakByIdResponse)(nil), "parrots.parrots.QueryGetBeakByIdResponse")
	proto.RegisterType((*QueryGetBeaksByNameSubstringRequest)(nil), "parrots.parrots.QueryGetBeaksByNameSubstringRequest")
	proto.RegisterType((*QueryGetBeaksByNameSubstringResponse)(nil), "parrots.parrots.QueryGetBeaksByNameSubstringResponse")
	proto.RegisterType((*QueryGetBeaksByTagRequest)(nil), "parrots.parrots.QueryGetBeaksByTagRequest")
	proto.RegisterType((*QueryGetBeaksByTagResponse)(nil), "parrots.parrots.QueryGetBeaksByTagResponse")
	proto.RegisterType((*QueryGetRespectedBeaksRequest)(nil), "parrots.parrots.QueryGetRespectedBeaksRequest")
	proto.RegisterType((*QueryGetRespectedBeaksResponse)(nil), "parrots.parrots.QueryGetRespectedBeaksResponse")
	proto.RegisterType((*QueryGetProfileByCreatorRequest)(nil), "parrots.parrots.QueryGetProfileByCreatorRequest")
	proto.RegisterType((*QueryGetProfileByCreatorResponse)(nil), "parrots.parrots.QueryGetProfileByCreatorResponse")
	proto.RegisterType((*QueryGetCommentsByBeakIdRequest)(nil), "parrots.parrots.QueryGetCommentsByBeakIdRequest")
	proto.RegisterType((*QueryGetCommentsByBeakIdResponse)(nil), "parrots.parrots.QueryGetCommentsByBeakIdResponse")
}

func init() { proto.RegisterFile("parrots/query.proto", fileDescriptor_0c9f6f9ef187aba2) }

var fileDescriptor_0c9f6f9ef187aba2 = []byte{
	// 1109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x98, 0x4d, 0x6f, 0x1b, 0x55,
	0x17, 0xc7, 0x73, 0xdd, 0x24, 0xed, 0x73, 0xf2, 0x94, 0xc2, 0x8d, 0xa9, 0xdd, 0xa1, 0x38, 0xce,
	0xc4, 0x4a, 0xec, 0xb4, 0x9a, 0xa9, 0x4d, 0xba, 0x42, 0x42, 0xc2, 0x11, 0x44, 0x48, 0x80, 0x82,
	0x79, 0x93, 0xd8, 0x58, 0xd7, 0xf6, 0xc5, 0xb2, 0xb0, 0x67, 0xdc, 0x99, 0x31, 0xc2, 0xdb, 0x0a,
	0x36, 0x20, 0xa4, 0xaa, 0x91, 0x60, 0xc3, 0x06, 0xb6, 0x20, 0xf1, 0x05, 0xf8, 0x00, 0x5d, 0x56,
	0x42, 0x48, 0xac, 0x10, 0x4a, 0xf8, 0x20, 0x68, 0xee, 0x9c, 0xeb, 0x79, 0x9f, 0x49, 0xa8, 0xa5,
	0xac, 0xe2, 0x39, 0xf7, 0x9c, 0x73, 0x7f, 0xe7, 0xdc, 0x33, 0x77, 0xfe, 0x0a, 0x6c, 0x4e, 0x99,
	0x65, 0x99, 0x8e, 0xad, 0x3f, 0x98, 0x71, 0x6b, 0xae, 0x4d, 0x2d, 0xd3, 0x31, 0xe9, 0x0d, 0x34,
	0x6a, 0xf8, 0x57, 0x29, 0x0e, 0xcd, 0xa1, 0x29, 0xd6, 0x74, 0xf7, 0x97, 0xe7, 0xa6, 0xdc, 0x1e,
	0x9a, 0xe6, 0x70, 0xcc, 0x75, 0x36, 0x1d, 0xe9, 0xcc, 0x30, 0x4c, 0x87, 0x39, 0x23, 0xd3, 0xb0,
	0x71, 0x75, 0xbf, 0x6f, 0xda, 0x13, 0xd3, 0xd6, 0x7b, 0xcc, 0xe6, 0x5e, 0x76, 0xfd, 0xf3, 0x66,
	0x8f, 0x3b, 0xac, 0xa9, 0x4f, 0xd9, 0x70, 0x64, 0x08, 0x67, 0xf4, 0x2d, 0x4a, 0x8a, 0x29, 0xb3,
	0xd8, 0xc4, 0x8e, 0x5a, 0x27, 0xe6, 0x80, 0x8f, 0xd1, 0xaa, 0x16, 0x81, 0xbe, 0xe7, 0x66, 0x3b,
	0x16, 0xae, 0x1d, 0xfe, 0x60, 0xc6, 0x6d, 0x47, 0x7d, 0x1b, 0x36, 0x43, 0x56, 0x7b, 0x6a, 0x1a,
	0x36, 0xa7, 0xf7, 0x61, 0xdd, 0x4b, 0x59, 0x26, 0x55, 0x52, 0xdf, 0x68, 0x95, 0xb4, 0x48, 0x69,
	0x9a, 0x17, 0xd0, 0x5e, 0x7d, 0xf2, 0xd7, 0xd6, 0x4a, 0x07, 0x9d, 0x55, 0x06, 0x25, 0x91, 0xed,
	0x88, 0x3b, 0xc7, 0x96, 0xf9, 0xe9, 0x68, 0xcc, 0xe5, 0x46, 0xf4, 0x4d, 0x00, 0x1f, 0x1f, 0xb3,
	0xee, 0x6a, 0x5e, 0xad, 0x9a, 0x5b, 0xab, 0xe6, 0x75, 0x12, 0x6b, 0xd5, 0x8e, 0xd9, 0x90, 0x63,
	0x6c, 0x27, 0x10, 0xa9, 0x7e, 0x4f, 0xa0, 0x1c, 0xdf, 0x03, 0xb1, 0x5b, 0x70, 0x15, 0x6d, 0x65,
	0x52, 0xbd, 0x52, 0xdf, 0x68, 0x95, 0xe3, 0xdc, 0xde, 0x7a, 0x47, 0x3a, 0xd2, 0xa3, 0x10, 0x58,
	0x41, 0x80, 0xed, 0xe5, 0x82, 0x79, 0x1b, 0x86, 0xc8, 0x14, 0x04, 0xc3, 0xc4, 0x87, 0xe6, 0xcc,
	0x70, 0x64, 0x9b, 0x9b, 0x70, 0x2b, 0x61, 0x0d, 0xa9, 0x8b, 0xb0, 0xd6, 0x77, 0x0d, 0xa2, 0x2b,
	0xab, 0x1d, 0xef, 0x41, 0xad, 0xc3, 0xcd, 0x48, 0x9d, 0xb2, 0x95, 0xcf, 0x41, 0x61, 0x34, 0x40,
	0xe7, 0xc2, 0x68, 0xa0, 0xbe, 0x13, 0xeb, 0x7a, 0xb0, 0x21, 0xd3, 0x45, 0x43, 0x48, 0x76, 0x43,
	0xd0, 0x51, 0x7d, 0x0d, 0xaa, 0x91, 0x74, 0xed, 0xf9, 0x87, 0x36, 0xb7, 0x0c, 0x36, 0x59, 0x20,
	0x28, 0x70, 0x6d, 0x86, 0x26, 0x91, 0xf8, 0x7f, 0x9d, 0xc5, 0xb3, 0xfa, 0x31, 0x6c, 0x67, 0xc4,
	0x3f, 0x03, 0xd8, 0x4b, 0xd8, 0xc4, 0x23, 0xee, 0xb4, 0x39, 0xfb, 0xcc, 0x0e, 0x75, 0xb8, 0x05,
	0x4a, 0xd2, 0x62, 0x66, 0x8b, 0x03, 0xe3, 0xfa, 0xfa, 0x78, 0x2c, 0xc2, 0x96, 0x3d, 0xae, 0x8f,
	0x02, 0xe3, 0xea, 0xef, 0x81, 0x54, 0x77, 0x60, 0xad, 0xe7, 0x1a, 0x70, 0x58, 0x5f, 0x8c, 0xb5,
	0xc0, 0x75, 0xef, 0x78, 0x3e, 0xcb, 0x9b, 0xd3, 0x86, 0x5f, 0xb5, 0x9b, 0xbf, 0x3d, 0x7f, 0x6b,
	0x90, 0x36, 0x59, 0x6f, 0xf8, 0xf0, 0xbe, 0x2b, 0xc2, 0x37, 0x60, 0xd5, 0x05, 0xc3, 0xde, 0xa4,
	0xb0, 0x0b, 0x17, 0xf5, 0x84, 0xc0, 0x4e, 0xe8, 0x70, 0xda, 0xf3, 0x77, 0xd9, 0x84, 0xbf, 0x3f,
	0xeb, 0xd9, 0x8e, 0x35, 0x32, 0x86, 0x72, 0xfb, 0x1a, 0x5c, 0x37, 0x82, 0x76, 0x1c, 0xad, 0xb0,
	0x31, 0x72, 0x34, 0x85, 0xff, 0x7c, 0x34, 0x3f, 0x10, 0xa8, 0x65, 0x53, 0x5d, 0xea, 0x31, 0xcd,
	0x22, 0xd3, 0xde, 0x9e, 0x7f, 0xc0, 0x16, 0x9d, 0x7a, 0x1e, 0xae, 0x38, 0x4c, 0xf6, 0xc7, 0xfd,
	0xb9, 0xb4, 0xae, 0x3c, 0x26, 0x91, 0x17, 0x09, 0xf7, 0xbd, 0xd4, 0x5e, 0xe8, 0xf0, 0xb2, 0x64,
	0x72, 0xd7, 0x79, 0xdf, 0xe1, 0x83, 0xd0, 0xeb, 0x1a, 0x1d, 0xdc, 0xef, 0x08, 0x54, 0xd2, 0x22,
	0x2e, 0xb5, 0x92, 0x57, 0x61, 0x2b, 0x76, 0x39, 0x1e, 0x5a, 0x9c, 0x39, 0xa6, 0x25, 0x6b, 0x29,
	0xc3, 0xd5, 0xbe, 0x67, 0xc1, 0xf3, 0x95, 0x8f, 0xea, 0x47, 0x09, 0x37, 0xf3, 0x22, 0xf8, 0x19,
	0x2e, 0xd6, 0x87, 0xc4, 0xa7, 0x3a, 0x34, 0x27, 0x13, 0x6e, 0x38, 0x76, 0x7b, 0xee, 0xd6, 0xef,
	0x5f, 0x0d, 0x37, 0x61, 0xbd, 0x27, 0x0c, 0xd8, 0x65, 0x7c, 0x5a, 0x5e, 0x67, 0x7e, 0x24, 0x7e,
	0x75, 0x71, 0x08, 0xac, 0xee, 0x00, 0xae, 0xf5, 0x71, 0x2d, 0xf5, 0x0b, 0x8f, 0xc1, 0x9d, 0x85,
	0xe7, 0xd2, 0x18, 0x5b, 0x7f, 0xdc, 0x80, 0x35, 0xc1, 0x48, 0x1d, 0x58, 0xf7, 0x14, 0x10, 0xdd,
	0x89, 0x01, 0xc4, 0x65, 0x96, 0x52, 0xcb, 0x76, 0xf2, 0xb6, 0x52, 0xb7, 0x1e, 0xfe, 0xfe, 0xcf,
	0x49, 0xe1, 0x16, 0x2d, 0xe9, 0x01, 0x5d, 0x17, 0xd0, 0x77, 0xf4, 0x4b, 0x02, 0x1b, 0x01, 0xdd,
	0x43, 0xeb, 0xc9, 0x69, 0xe3, 0xf2, 0x4b, 0x69, 0x9c, 0xc3, 0x13, 0x29, 0xaa, 0x82, 0x42, 0xa1,
	0xe5, 0x38, 0x05, 0x4a, 0xa6, 0x6f, 0x09, 0xfc, 0x3f, 0xa8, 0x64, 0x68, 0x4a, 0xf6, 0x04, 0x25,
	0xa4, 0xec, 0x9f, 0xc7, 0x15, 0x49, 0x76, 0x05, 0x49, 0x95, 0x56, 0xd2, 0x48, 0xba, 0xe2, 0x3b,
	0x4e, 0xbf, 0x22, 0x00, 0x7e, 0x25, 0x74, 0x2f, 0xaf, 0x56, 0xc9, 0x52, 0xcf, 0x77, 0x44, 0x92,
	0x9a, 0x20, 0xa9, 0xd0, 0xdb, 0x31, 0x92, 0x21, 0x77, 0xba, 0xb2, 0x2f, 0xbf, 0x12, 0x28, 0x26,
	0xa9, 0x1e, 0xda, 0xcc, 0xdb, 0x28, 0xa6, 0xb0, 0x94, 0xd6, 0x45, 0x42, 0x90, 0xf2, 0x9e, 0xa0,
	0xdc, 0xa7, 0xf5, 0x2c, 0xca, 0x6e, 0x6f, 0xde, 0x95, 0x5a, 0x8d, 0x3e, 0x26, 0x70, 0x3d, 0xa4,
	0x98, 0xe8, 0x7e, 0xea, 0xbe, 0x31, 0xcd, 0xa5, 0xdc, 0x39, 0x97, 0x2f, 0xc2, 0xd5, 0x05, 0x9c,
	0x4a, 0xab, 0x89, 0x70, 0xe2, 0x9a, 0xc5, 0xe3, 0xfc, 0xda, 0x9b, 0x72, 0x29, 0x97, 0x32, 0xa6,
	0x3c, 0xa2, 0xda, 0x32, 0xa6, 0x3c, 0xaa, 0xbd, 0x32, 0x66, 0xcb, 0xc5, 0x61, 0xe3, 0xb1, 0x87,
	0x44, 0xbf, 0xf1, 0x60, 0xa4, 0xfc, 0xc9, 0x80, 0x89, 0x88, 0xa9, 0x0c, 0x98, 0xa8, 0x96, 0x52,
	0xf7, 0x04, 0xcc, 0x36, 0xdd, 0x4a, 0xed, 0x8d, 0x7b, 0x6a, 0xa3, 0x01, 0xfd, 0x8d, 0x40, 0x29,
	0x45, 0xae, 0xd0, 0x83, 0xec, 0xd3, 0x48, 0xd6, 0x5c, 0xca, 0xfd, 0x0b, 0x46, 0x21, 0xf1, 0x81,
	0x20, 0xd6, 0xe8, 0xdd, 0x8c, 0xd3, 0xec, 0xcd, 0xbb, 0xee, 0x90, 0x75, 0xed, 0x05, 0xe2, 0x49,
	0x60, 0xdc, 0x84, 0xae, 0xc8, 0x1b, 0xb7, 0xa0, 0xe8, 0xc9, 0x1b, 0xb7, 0x90, 0x50, 0x51, 0x1b,
	0x02, 0x70, 0x87, 0x6e, 0x67, 0x03, 0xba, 0xd2, 0xe9, 0x27, 0x02, 0x2f, 0xc4, 0x74, 0x02, 0xd5,
	0x52, 0x77, 0x4b, 0x94, 0x20, 0x8a, 0x7e, 0x6e, 0x7f, 0x24, 0xbc, 0x2b, 0x08, 0x77, 0x69, 0x2d,
	0x91, 0xd0, 0x92, 0x41, 0x38, 0x87, 0x3f, 0x13, 0xd8, 0x4c, 0xf8, 0xee, 0xd3, 0x7b, 0xf9, 0xf7,
	0x44, 0x58, 0x5f, 0x28, 0xcd, 0x0b, 0x44, 0x20, 0xaa, 0x2e, 0x50, 0x1b, 0x74, 0x2f, 0xef, 0x62,
	0x41, 0xa5, 0x42, 0x7f, 0xf1, 0x68, 0xa3, 0xdf, 0xf1, 0x0c, 0xda, 0x14, 0xdd, 0x91, 0x41, 0x9b,
	0x26, 0x12, 0x72, 0xae, 0x41, 0xa9, 0x0a, 0x5c, 0x5c, 0xf1, 0x66, 0x8d, 0x06, 0xed, 0xe6, 0x93,
	0xd3, 0x0a, 0x79, 0x7a, 0x5a, 0x21, 0x7f, 0x9f, 0x56, 0xc8, 0xa3, 0xb3, 0xca, 0xca, 0xd3, 0xb3,
	0xca, 0xca, 0x9f, 0x67, 0x95, 0x95, 0x4f, 0x4a, 0x32, 0xf4, 0x8b, 0x45, 0x12, 0x67, 0x3e, 0xe5,
	0x76, 0x6f, 0x5d, 0xfc, 0x57, 0xe5, 0x95, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x27, 0x07, 0x78,
	0x6b, 0x09, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Profiles items.
	GetProfiles(ctx context.Context, in *QueryGetProfilesRequest, opts ...grpc.CallOption) (*QueryGetProfilesResponse, error)
	// Queries a list of ProfileCount items.
	ProfileCount(ctx context.Context, in *QueryProfileCountRequest, opts ...grpc.CallOption) (*QueryProfileCountResponse, error)
	// Queries a list of GetProfile items.
	GetProfile(ctx context.Context, in *QueryGetProfileRequest, opts ...grpc.CallOption) (*QueryGetProfileResponse, error)
	// Queries a list of GetProfileByUsername items.
	GetProfileByUsername(ctx context.Context, in *QueryGetProfileByUsernameRequest, opts ...grpc.CallOption) (*QueryGetProfileByUsernameResponse, error)
	// Queries a list of GetBeaksCount items.
	GetBeaksCount(ctx context.Context, in *QueryGetBeaksCountRequest, opts ...grpc.CallOption) (*QueryGetBeaksCountResponse, error)
	// Queries a list of GetAllBeaks items.
	GetAllBeaks(ctx context.Context, in *QueryGetAllBeaksRequest, opts ...grpc.CallOption) (*QueryGetAllBeaksResponse, error)
	// Queries a list of GetBeakById items.
	GetBeakById(ctx context.Context, in *QueryGetBeakByIdRequest, opts ...grpc.CallOption) (*QueryGetBeakByIdResponse, error)
	// Queries a list of GetBeaksByNameSubstring items.
	GetBeaksByNameSubstring(ctx context.Context, in *QueryGetBeaksByNameSubstringRequest, opts ...grpc.CallOption) (*QueryGetBeaksByNameSubstringResponse, error)
	// Queries a list of GetBeaksByTag items.
	GetBeaksByTag(ctx context.Context, in *QueryGetBeaksByTagRequest, opts ...grpc.CallOption) (*QueryGetBeaksByTagResponse, error)
	// Queries a list of GetRespectedBeaks items.
	GetRespectedBeaks(ctx context.Context, in *QueryGetRespectedBeaksRequest, opts ...grpc.CallOption) (*QueryGetRespectedBeaksResponse, error)
	// Queries a list of GetProfileByCreator items.
	GetProfileByCreator(ctx context.Context, in *QueryGetProfileByCreatorRequest, opts ...grpc.CallOption) (*QueryGetProfileByCreatorResponse, error)
	// Queries a list of GetCommentsByBeakId items.
	GetCommentsByBeakId(ctx context.Context, in *QueryGetCommentsByBeakIdRequest, opts ...grpc.CallOption) (*QueryGetCommentsByBeakIdResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProfiles(ctx context.Context, in *QueryGetProfilesRequest, opts ...grpc.CallOption) (*QueryGetProfilesResponse, error) {
	out := new(QueryGetProfilesResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/GetProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProfileCount(ctx context.Context, in *QueryProfileCountRequest, opts ...grpc.CallOption) (*QueryProfileCountResponse, error) {
	out := new(QueryProfileCountResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/ProfileCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProfile(ctx context.Context, in *QueryGetProfileRequest, opts ...grpc.CallOption) (*QueryGetProfileResponse, error) {
	out := new(QueryGetProfileResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProfileByUsername(ctx context.Context, in *QueryGetProfileByUsernameRequest, opts ...grpc.CallOption) (*QueryGetProfileByUsernameResponse, error) {
	out := new(QueryGetProfileByUsernameResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/GetProfileByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBeaksCount(ctx context.Context, in *QueryGetBeaksCountRequest, opts ...grpc.CallOption) (*QueryGetBeaksCountResponse, error) {
	out := new(QueryGetBeaksCountResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/GetBeaksCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllBeaks(ctx context.Context, in *QueryGetAllBeaksRequest, opts ...grpc.CallOption) (*QueryGetAllBeaksResponse, error) {
	out := new(QueryGetAllBeaksResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/GetAllBeaks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBeakById(ctx context.Context, in *QueryGetBeakByIdRequest, opts ...grpc.CallOption) (*QueryGetBeakByIdResponse, error) {
	out := new(QueryGetBeakByIdResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/GetBeakById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBeaksByNameSubstring(ctx context.Context, in *QueryGetBeaksByNameSubstringRequest, opts ...grpc.CallOption) (*QueryGetBeaksByNameSubstringResponse, error) {
	out := new(QueryGetBeaksByNameSubstringResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/GetBeaksByNameSubstring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBeaksByTag(ctx context.Context, in *QueryGetBeaksByTagRequest, opts ...grpc.CallOption) (*QueryGetBeaksByTagResponse, error) {
	out := new(QueryGetBeaksByTagResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/GetBeaksByTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRespectedBeaks(ctx context.Context, in *QueryGetRespectedBeaksRequest, opts ...grpc.CallOption) (*QueryGetRespectedBeaksResponse, error) {
	out := new(QueryGetRespectedBeaksResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/GetRespectedBeaks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProfileByCreator(ctx context.Context, in *QueryGetProfileByCreatorRequest, opts ...grpc.CallOption) (*QueryGetProfileByCreatorResponse, error) {
	out := new(QueryGetProfileByCreatorResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/GetProfileByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCommentsByBeakId(ctx context.Context, in *QueryGetCommentsByBeakIdRequest, opts ...grpc.CallOption) (*QueryGetCommentsByBeakIdResponse, error) {
	out := new(QueryGetCommentsByBeakIdResponse)
	err := c.cc.Invoke(ctx, "/parrots.parrots.Query/GetCommentsByBeakId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Profiles items.
	GetProfiles(context.Context, *QueryGetProfilesRequest) (*QueryGetProfilesResponse, error)
	// Queries a list of ProfileCount items.
	ProfileCount(context.Context, *QueryProfileCountRequest) (*QueryProfileCountResponse, error)
	// Queries a list of GetProfile items.
	GetProfile(context.Context, *QueryGetProfileRequest) (*QueryGetProfileResponse, error)
	// Queries a list of GetProfileByUsername items.
	GetProfileByUsername(context.Context, *QueryGetProfileByUsernameRequest) (*QueryGetProfileByUsernameResponse, error)
	// Queries a list of GetBeaksCount items.
	GetBeaksCount(context.Context, *QueryGetBeaksCountRequest) (*QueryGetBeaksCountResponse, error)
	// Queries a list of GetAllBeaks items.
	GetAllBeaks(context.Context, *QueryGetAllBeaksRequest) (*QueryGetAllBeaksResponse, error)
	// Queries a list of GetBeakById items.
	GetBeakById(context.Context, *QueryGetBeakByIdRequest) (*QueryGetBeakByIdResponse, error)
	// Queries a list of GetBeaksByNameSubstring items.
	GetBeaksByNameSubstring(context.Context, *QueryGetBeaksByNameSubstringRequest) (*QueryGetBeaksByNameSubstringResponse, error)
	// Queries a list of GetBeaksByTag items.
	GetBeaksByTag(context.Context, *QueryGetBeaksByTagRequest) (*QueryGetBeaksByTagResponse, error)
	// Queries a list of GetRespectedBeaks items.
	GetRespectedBeaks(context.Context, *QueryGetRespectedBeaksRequest) (*QueryGetRespectedBeaksResponse, error)
	// Queries a list of GetProfileByCreator items.
	GetProfileByCreator(context.Context, *QueryGetProfileByCreatorRequest) (*QueryGetProfileByCreatorResponse, error)
	// Queries a list of GetCommentsByBeakId items.
	GetCommentsByBeakId(context.Context, *QueryGetCommentsByBeakIdRequest) (*QueryGetCommentsByBeakIdResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetProfiles(ctx context.Context, req *QueryGetProfilesRequest) (*QueryGetProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfiles not implemented")
}
func (*UnimplementedQueryServer) ProfileCount(ctx context.Context, req *QueryProfileCountRequest) (*QueryProfileCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileCount not implemented")
}
func (*UnimplementedQueryServer) GetProfile(ctx context.Context, req *QueryGetProfileRequest) (*QueryGetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (*UnimplementedQueryServer) GetProfileByUsername(ctx context.Context, req *QueryGetProfileByUsernameRequest) (*QueryGetProfileByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByUsername not implemented")
}
func (*UnimplementedQueryServer) GetBeaksCount(ctx context.Context, req *QueryGetBeaksCountRequest) (*QueryGetBeaksCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeaksCount not implemented")
}
func (*UnimplementedQueryServer) GetAllBeaks(ctx context.Context, req *QueryGetAllBeaksRequest) (*QueryGetAllBeaksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBeaks not implemented")
}
func (*UnimplementedQueryServer) GetBeakById(ctx context.Context, req *QueryGetBeakByIdRequest) (*QueryGetBeakByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeakById not implemented")
}
func (*UnimplementedQueryServer) GetBeaksByNameSubstring(ctx context.Context, req *QueryGetBeaksByNameSubstringRequest) (*QueryGetBeaksByNameSubstringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeaksByNameSubstring not implemented")
}
func (*UnimplementedQueryServer) GetBeaksByTag(ctx context.Context, req *QueryGetBeaksByTagRequest) (*QueryGetBeaksByTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeaksByTag not implemented")
}
func (*UnimplementedQueryServer) GetRespectedBeaks(ctx context.Context, req *QueryGetRespectedBeaksRequest) (*QueryGetRespectedBeaksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRespectedBeaks not implemented")
}
func (*UnimplementedQueryServer) GetProfileByCreator(ctx context.Context, req *QueryGetProfileByCreatorRequest) (*QueryGetProfileByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileByCreator not implemented")
}
func (*UnimplementedQueryServer) GetCommentsByBeakId(ctx context.Context, req *QueryGetCommentsByBeakIdRequest) (*QueryGetCommentsByBeakIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentsByBeakId not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/GetProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProfiles(ctx, req.(*QueryGetProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProfileCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProfileCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProfileCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/ProfileCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProfileCount(ctx, req.(*QueryProfileCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProfile(ctx, req.(*QueryGetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProfileByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProfileByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProfileByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/GetProfileByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProfileByUsername(ctx, req.(*QueryGetProfileByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBeaksCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBeaksCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBeaksCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/GetBeaksCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBeaksCount(ctx, req.(*QueryGetBeaksCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllBeaks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllBeaksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllBeaks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/GetAllBeaks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllBeaks(ctx, req.(*QueryGetAllBeaksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBeakById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBeakByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBeakById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/GetBeakById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBeakById(ctx, req.(*QueryGetBeakByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBeaksByNameSubstring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBeaksByNameSubstringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBeaksByNameSubstring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/GetBeaksByNameSubstring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBeaksByNameSubstring(ctx, req.(*QueryGetBeaksByNameSubstringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBeaksByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBeaksByTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBeaksByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/GetBeaksByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBeaksByTag(ctx, req.(*QueryGetBeaksByTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRespectedBeaks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRespectedBeaksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRespectedBeaks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/GetRespectedBeaks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRespectedBeaks(ctx, req.(*QueryGetRespectedBeaksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProfileByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProfileByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProfileByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/GetProfileByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProfileByCreator(ctx, req.(*QueryGetProfileByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCommentsByBeakId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCommentsByBeakIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCommentsByBeakId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parrots.parrots.Query/GetCommentsByBeakId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCommentsByBeakId(ctx, req.(*QueryGetCommentsByBeakIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parrots.parrots.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetProfiles",
			Handler:    _Query_GetProfiles_Handler,
		},
		{
			MethodName: "ProfileCount",
			Handler:    _Query_ProfileCount_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _Query_GetProfile_Handler,
		},
		{
			MethodName: "GetProfileByUsername",
			Handler:    _Query_GetProfileByUsername_Handler,
		},
		{
			MethodName: "GetBeaksCount",
			Handler:    _Query_GetBeaksCount_Handler,
		},
		{
			MethodName: "GetAllBeaks",
			Handler:    _Query_GetAllBeaks_Handler,
		},
		{
			MethodName: "GetBeakById",
			Handler:    _Query_GetBeakById_Handler,
		},
		{
			MethodName: "GetBeaksByNameSubstring",
			Handler:    _Query_GetBeaksByNameSubstring_Handler,
		},
		{
			MethodName: "GetBeaksByTag",
			Handler:    _Query_GetBeaksByTag_Handler,
		},
		{
			MethodName: "GetRespectedBeaks",
			Handler:    _Query_GetRespectedBeaks_Handler,
		},
		{
			MethodName: "GetProfileByCreator",
			Handler:    _Query_GetProfileByCreator_Handler,
		},
		{
			MethodName: "GetCommentsByBeakId",
			Handler:    _Query_GetCommentsByBeakId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parrots/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetProfilesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfilesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfilesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProfilesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfilesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfilesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Profile) > 0 {
		for iNdEx := len(m.Profile) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profile[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProfileCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProfileCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProfileCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryProfileCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProfileCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProfileCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProfileByUsernameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfileByUsernameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfileByUsernameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProfileByUsernameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfileByUsernameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfileByUsernameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBeaksCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBeaksCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBeaksCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetBeaksCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBeaksCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBeaksCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllBeaksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllBeaksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllBeaksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllBeaksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllBeaksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllBeaksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Beaks) > 0 {
		for iNdEx := len(m.Beaks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Beaks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBeakByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBeakByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBeakByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBeakByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBeakByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBeakByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Beak != nil {
		{
			size, err := m.Beak.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBeaksByNameSubstringRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBeaksByNameSubstringRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBeaksByNameSubstringRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NameSubstring) > 0 {
		i -= len(m.NameSubstring)
		copy(dAtA[i:], m.NameSubstring)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NameSubstring)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBeaksByNameSubstringResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBeaksByNameSubstringResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBeaksByNameSubstringResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Beaks) > 0 {
		for iNdEx := len(m.Beaks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Beaks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBeaksByTagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBeaksByTagRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBeaksByTagRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBeaksByTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBeaksByTagResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBeaksByTagResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Beaks) > 0 {
		for iNdEx := len(m.Beaks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Beaks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRespectedBeaksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRespectedBeaksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRespectedBeaksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRespectedBeaksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRespectedBeaksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRespectedBeaksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Beaks) > 0 {
		for iNdEx := len(m.Beaks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Beaks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProfileByCreatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfileByCreatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfileByCreatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProfileByCreatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfileByCreatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfileByCreatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCommentsByBeakIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCommentsByBeakIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCommentsByBeakIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BeakId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BeakId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCommentsByBeakIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCommentsByBeakIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCommentsByBeakIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetProfilesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProfilesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Profile) > 0 {
		for _, e := range m.Profile {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProfileCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryProfileCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryGetProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProfileByUsernameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProfileByUsernameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBeaksCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetBeaksCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryGetAllBeaksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAllBeaksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Beaks) > 0 {
		for _, e := range m.Beaks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBeakByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetBeakByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Beak != nil {
		l = m.Beak.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBeaksByNameSubstringRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NameSubstring)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBeaksByNameSubstringResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Beaks) > 0 {
		for _, e := range m.Beaks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBeaksByTagRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBeaksByTagResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Beaks) > 0 {
		for _, e := range m.Beaks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetRespectedBeaksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetRespectedBeaksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Beaks) > 0 {
		for _, e := range m.Beaks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProfileByCreatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProfileByCreatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCommentsByBeakIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BeakId != 0 {
		n += 1 + sovQuery(uint64(m.BeakId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCommentsByBeakIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProfilesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfilesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfilesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProfilesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfilesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfilesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profile = append(m.Profile, &Profile{})
			if err := m.Profile[len(m.Profile)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProfileCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProfileCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProfileCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProfileCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProfileCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProfileCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &Profile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProfileByUsernameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfileByUsernameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfileByUsernameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProfileByUsernameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfileByUsernameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfileByUsernameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &Profile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBeaksCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBeaksCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBeaksCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBeaksCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBeaksCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBeaksCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllBeaksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllBeaksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllBeaksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllBeaksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllBeaksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllBeaksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beaks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beaks = append(m.Beaks, &Beak{})
			if err := m.Beaks[len(m.Beaks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBeakByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBeakByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBeakByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBeakByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBeakByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBeakByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beak", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Beak == nil {
				m.Beak = &Beak{}
			}
			if err := m.Beak.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBeaksByNameSubstringRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBeaksByNameSubstringRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBeaksByNameSubstringRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameSubstring", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameSubstring = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBeaksByNameSubstringResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBeaksByNameSubstringResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBeaksByNameSubstringResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beaks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beaks = append(m.Beaks, &Beak{})
			if err := m.Beaks[len(m.Beaks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBeaksByTagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBeaksByTagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBeaksByTagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBeaksByTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBeaksByTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBeaksByTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beaks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beaks = append(m.Beaks, &Beak{})
			if err := m.Beaks[len(m.Beaks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRespectedBeaksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRespectedBeaksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRespectedBeaksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRespectedBeaksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRespectedBeaksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRespectedBeaksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beaks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Beaks = append(m.Beaks, &Beak{})
			if err := m.Beaks[len(m.Beaks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProfileByCreatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfileByCreatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfileByCreatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProfileByCreatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfileByCreatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfileByCreatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &Profile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCommentsByBeakIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCommentsByBeakIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCommentsByBeakIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeakId", wireType)
			}
			m.BeakId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeakId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCommentsByBeakIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCommentsByBeakIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCommentsByBeakIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
